{"version":3,"file":"static/js/654.88cc189d.chunk.js","mappings":"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","sources":["components/RegisterForm/RegStepOne.styled.js","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/Validation.jsx","components/RegisterForm/RegStepOne.jsx","components/RegisterForm/RegStepTwo.styled.js","components/RegisterForm/RegStepTwo.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from 'constants/theme';\n\nexport const PasswordWrapper = styled.div`\n  position: relative;\n  padding: 0;\n`;\n\nexport const PasswordToggle = styled.button`\n  position: absolute;\n  right: 10px;\n  bottom: 8px;\n  transform: translateY(-15%);\n  border: none;\n  background: none;\n  font-size: 20px;\n  color: ${theme.colors.secondaryText};\n  cursor: pointer;\n  z-index: 100;\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { theme } from 'constants/theme';\nimport { NavLink } from 'react-router-dom';\n\nexport const ModalWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 85%;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  overflow-y: auto;\n  background-color: ${theme.colors.cardBackground};\n  border-radius: 40px;\n  padding: 60px 80px 40px 80px;\n  width: 618px;\n\n  box-shadow: ${theme.boxShadow.second};\n  ${theme.mq.desktop} {\n    margin-top: 0;\n  }\n  ${theme.mq.tabletOnly} {\n    margin-top: 110px;\n  }\n  ${theme.mq.mobileOnly} {\n    background-color: transparent;\n    box-shadow: none;\n    width: 100%;\n    padding: 0 0 20px 0;\n  }\n`;\n\nexport const FormTitle = styled.h1`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.medium};\n  font-size: 36px;\n  line-height: 49px;\n  text-align: center;\n  align-items: center;\n  color: ${theme.colors.mainText};\n  ${theme.mq.mobileOnly} {\n    font-size: ${theme.fontSizes.l};\n    line-height: 32px;\n  }\n`;\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px;\n  /* margin-bottom: 40px;  */\n  /* gap: 30px; */\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin-bottom: 50px;\n  margin-top: 40px;\n  width: 100%;\n`;\n\nexport const Paragraph = styled.p`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.normal};\n  font-size: ${theme.fontSizes.xxxs};\n  line-height: 16px;\n  align-items: center;\n  text-align: center;\n  color: ${theme.colors.secondaryText};\n`;\n\nexport const LoginLink = styled(NavLink)`\n  color: #3091eb;\n  text-decoration: none;\n`;\n\nexport const ErrorMessage = styled.div`\n  position: absolute;\n  color: red;\n  font-size: 14px;\n  text-align: center;\n  width: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 120px;\n  ${theme.mq.mobileOnly} {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n\n\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\n// Formik initials\nexport const initialValues = {\n  name: '',\n  city: '',\n  phone: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\n// Yup Validation\nexport const validationSchemaStepOne = Yup.object().shape({\n  email: Yup.string()\n    .email('Please enter a valid email address, example: \"mail@mail.com\"')\n    .matches(\n      /^([a-zA-Z][\\w+-]+(?:\\.\\w+)?)@([\\w-]+(?:\\.[a-zA-Z]{2,10})+)$/,\n      'Please enter a valid email address, example: \"mail@mail.com\"'\n    )\n    .required('Email is required')\n    .min(12, 'Email should be at least 12 characters long')\n    .max(63, 'Email should be up to 63 characters long'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{7,}$/,\n      '7 characters, 1 uppercase, 1 lowercase, 1 number'\n    )\n    .min(7, 'Password should be at least 7 characters long')\n    .max(32, 'Password should be up to 32 characters long')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Please confirm your password'),\n});\n\nexport const validationSchemaStepTwo = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      'Only letters can be accepted'\n    )\n    .max(12, 'Name should be up to 12 characters long')\n    .required('Name is required'),\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should be \"City, Region\" separated by comma, only letters can be accepted'\n    )\n    .min(3, 'City should have at least 3 characters')\n    .required('City is required'),\n  phone: Yup.string()\n    .matches(\n      /^\\+380\\d{9}$/,\n      'Number should begin with +380 and contain 13 digits'\n    )\n    .min(13, 'Phone number should be 13 digits')\n    .max(13, 'Phone number should be 13 digits')\n    .required('Phone number is required'),\n});\n\n// name without space ^[a-zA-Zа-яА-Я]+(?: [a-zA-Zа-яА-Я]+)*$\n","import React, { useState } from 'react';\nimport InputField from 'components/Ui-Kit/Input';\nimport { PasswordToggle, PasswordWrapper } from './RegStepOne.styled';\nimport { RxEyeOpen, RxEyeClosed } from 'react-icons/rx';\n\nconst RegStepOne = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const passwordInputType = showPassword ? 'text' : 'password';\n\n  return (\n    <>\n      <InputField\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"Email\"\n        autocomplete=\"email\"\n      />\n\n      <InputField\n        name=\"password\"\n        type={passwordInputType}\n        placeholder=\"Password\"\n        autocomplete=\"new-password\"\n      >\n        <PasswordToggle type=\"button\" onClick={toggleShowPassword}>\n          {showPassword ? <RxEyeOpen /> : <RxEyeClosed />}\n        </PasswordToggle>\n      </InputField>\n\n      <InputField\n        name=\"confirmPassword\"\n        type={passwordInputType}\n        placeholder=\"Confirm Password\"\n        autocomplete=\"new-password\"\n      />\n    </>\n  );\n};\n\nexport default RegStepOne;\n","import styled from 'styled-components';\nimport { theme } from 'constants/theme';\nexport const List = styled.ul`\n  position: absolute;\n  top: 279px;\n  left: 100px;\n  margin-top: 4px;\nlist-style-type: none;\n    border: 1px solid red;\n    max-height: 120px;\n    min-height: 20px;\n    overflow-y: scroll;\n  width: 420px;\n  list-style: none;\n  background-color: #ffffff;\n  border: 1px solid #e5e5e5;\n  border-radius: 4px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  z-index: 1;\n  ${theme.mq.mobileOnly} {\n    top: 150px;\n    le\n  }\n`;\n\nexport const ListItem = styled.li`\n  padding: 4px 8px;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #333333;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #f0f0f0;\n  }\n`;","import React, {useState, useEffect} from 'react';\nimport InputField from 'components/Ui-Kit/Input';\nimport PropTypes from 'prop-types';\nimport cities from '../../assets/files/uaCities.json';\nimport { List, ListItem } from './RegStepTwo.styled';\n\n\nconst RegStepTwo = ({value, setFieldValue}) => {\nconst [filteredCities, setFilteredCities] = useState([]);\n useEffect(() => {\n    const inputValue = value || '';\n    if (inputValue) {\n      const filtered = cities\n        .filter((city) => city.city.toLowerCase().startsWith(value.toLowerCase()))\n        .map(({ city, admin_name }) => `${city}, ${admin_name}`);\n      \n      setFilteredCities(filtered);\n    } else {\n      setFilteredCities([]);\n    }\n  }, [value]);\n\n  const handleCityClick = (city) => {\n    setFieldValue('city', city);\n    setFilteredCities([]);\n  };\n\n  const onClickHandle = (e) => {\n   console.log(e.target.innerText)\n }\n  return (\n    <>\n      <InputField name=\"name\" type=\"name\" placeholder=\"Name\" />\n      \n      <InputField name=\"city\" type=\"city\" placeholder=\"City, Region\" />\n      {filteredCities.length > 0 && (\n        <List>\n          {filteredCities.map((city, index) => (\n            <ListItem onClick={() => handleCityClick(city) } key={index}>{city}</ListItem>\n          ))}\n        </List>\n        )}\n       \n      <InputField name=\"phone\" type=\"phone\" placeholder=\"Phone +380123456789\" />\n    </>\n  );\n};\n\nRegStepTwo.propTypes = {\n  value: PropTypes.string,\n  setFieldValue: PropTypes.func,\n};\n\nexport default RegStepTwo;\n","import React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useSignupUserMutation } from 'redux/api/userApi';\n\nimport { Formik } from 'formik';\n\nimport {\n  initialValues,\n  validationSchemaStepOne,\n  validationSchemaStepTwo,\n} from './Validation';\nimport RegStepOne from './RegStepOne';\nimport RegStepTwo from './RegStepTwo';\nimport {\n  ModalContent,\n  ModalWrapper,\n  FormWrapper,\n  ButtonWrapper,\n  FormTitle,\n  Paragraph,\n  LoginLink,\n  ErrorMessage,\n} from './RegisterForm.styled';\nimport Button from 'components/Ui-Kit/Button';\n\nconst RegistrationForm = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [signupUser, { isError, error }] = useSignupUserMutation();\n  const navigate = useNavigate();\n  const { isAuth } = useSelector(state => state.user);\n\n  const handleNextClick = () => {\n    setCurrentStep(currentStep + 1);\n  };\n\n  const handleBackClick = () => {\n    setCurrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = (values, { setSubmitting }) => {\n    setSubmitting(false);\n\n    if (currentStep < 2) {\n      handleNextClick();\n    } else {\n      const credentials = {\n        name: values.name,\n        city: values.city,\n        phone: values.phone,\n        email: values.email,\n        password: values.password,\n      };\n\n      signupUser(credentials);\n    }\n  };\n\n  useEffect(() => {\n    if (isAuth) {\n      console.log('Congratulations! You are successfully signed up!');\n      navigate('/user');\n    }\n  });\n\n  return (\n    <ModalWrapper>\n      <ModalContent>\n        <FormTitle>Registration</FormTitle>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={\n            currentStep === 1\n              ? validationSchemaStepOne\n              : validationSchemaStepTwo\n          }\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, values, setFieldValue }) => {\n            return (\n              <FormWrapper>\n                {currentStep === 1 && <RegStepOne />}\n                {currentStep === 2 && (\n                  <RegStepTwo\n                    value={values.city}\n                    setFieldValue={setFieldValue}\n                  />\n                )}\n                <ButtonWrapper>\n                  <Button name=\"filled\" type=\"submit\" disabled={isSubmitting}>\n                    {currentStep < 2 ? 'Next' : 'Register'}\n                  </Button>\n                  {currentStep > 1 && (\n                    <Button name=\"transparent\" onClick={handleBackClick}>\n                      Back\n                    </Button>\n                  )}\n                </ButtonWrapper>\n              </FormWrapper>\n            );\n          }}\n        </Formik>\n        <Paragraph>\n          Already have an account? <LoginLink to=\"/login\">Login</LoginLink>\n        </Paragraph>\n        {isError && <ErrorMessage>{error.data.message}</ErrorMessage>}\n      </ModalContent>\n    </ModalWrapper>\n  );\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'components/RegisterForm/RegisterForm';\nimport AuthPageContainer from 'components/AuthPageContainer';\nimport Section from 'components/Section';\n\nconst Register = () => {\n  return (\n    <AuthPageContainer>\n      <Section>\n        <RegistrationForm />\n      </Section>\n    </AuthPageContainer>\n  );\n};\n\nexport default Register;\n"],"names":["PasswordToggle","styled","theme","ModalWrapper","ModalContent","FormTitle","FormWrapper","Form","ButtonWrapper","Paragraph","LoginLink","NavLink","ErrorMessage","initialValues","name","city","phone","email","password","confirmPassword","validationSchemaStepOne","Yup","shape","matches","required","min","max","oneOf","validationSchemaStepTwo","useState","showPassword","setShowPassword","passwordInputType","Input","type","placeholder","autocomplete","onClick","List","ListItem","value","setFieldValue","filteredCities","setFilteredCities","useEffect","filtered","cities","toLowerCase","startsWith","map","admin_name","length","index","handleCityClick","currentStep","setCurrentStep","useSignupUserMutation","signupUser","isError","error","navigate","useNavigate","isAuth","useSelector","state","user","handleBackClick","console","log","validationSchema","onSubmit","values","setSubmitting","credentials","isSubmitting","Button","disabled","to","data","message","AuthPageContainer","Section"],"sourceRoot":""}