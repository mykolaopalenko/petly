{"version":3,"file":"static/js/827.56841908.chunk.js","mappings":"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","sources":["components/RegisterForm/RegStepOne.styled.js","components/RegisterForm/RegStepOne.jsx","components/RegisterForm/RegStepTwo.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from 'constants/theme';\n\n\nexport const PasswordWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PasswordToggle = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-65%);\n  border: none;\n  background: none;\n  font-size: 20px;\n  color: ${theme.colors.secondaryText};\n  cursor: pointer;\n`;","import React, { useState } from 'react';\nimport InputField from 'components/Ui-Kit/Input';\nimport { PasswordToggle, PasswordWrapper } from './RegStepOne.styled';\nimport { RxEyeOpen, RxEyeClosed } from \"react-icons/rx\";\n\nconst RegStepOne = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const passwordInputType = showPassword ? 'text' : 'password';\n\n  return (\n    <div>\n      <InputField name=\"email\" type=\"email\" placeholder=\"Email\" />\n      <PasswordWrapper>\n        <InputField\n          name=\"password\"\n          type={passwordInputType}\n          placeholder=\"Password\"\n          autocomplete=\"new-password\"\n        />\n        <PasswordToggle type=\"button\" onClick={toggleShowPassword}>\n        {showPassword ? <RxEyeOpen /> : <RxEyeClosed />}\n      </PasswordToggle>\n      </PasswordWrapper>\n      <InputField\n        name=\"confirmPassword\"\n        type={passwordInputType}\n        placeholder=\"Confirm Password\"\n        autocomplete=\"new-password\"\n      />\n    </div>\n  );\n};\n\nexport default RegStepOne;","import React from 'react';\nimport InputField from 'components/Ui-Kit/Input';\n\n\nconst RegStepTwo = () => {\n    return (\n        <div>\n            <InputField name=\"name\" type=\"name\" placeholder=\"Name\" />\n            <InputField name=\"city\" type=\"city\" placeholder=\"City, Region\" />\n            <InputField name=\"phone\" type=\"phone\" placeholder=\"Phone +380123456789\" />\n        </div>\n    );\n};\n\nexport default RegStepTwo;","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { theme } from 'constants/theme';\nimport { NavLink } from 'react-router-dom';\n\nexport const ModalWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: ${theme.colors.cardBackground};\n  border-radius: 40px;\n  padding: 60px 80px 40px 80px;\n  width: 618px;\n  max-height: 605px;\n  box-shadow: ${theme.boxShadow.second};\n`;\n\nexport const FormTitle = styled.h1`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.medium};\n  font-size: 36px;\n  line-height: 49px;\n  text-align: center;\n  align-items: center;\n  color: ${theme.colors.mainText};\n`;\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  gap: 30px;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display:flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 100%;\n`;\n\nexport const Paragraph = styled.p`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.normal};\n  font-size: ${theme.fontSizes.xxxs};\n  line-height: 16px;\n  align-items: center;\n  text-align: center;\n  color: ${theme.colors.secondaryText};\n`;\n\nexport const LoginLink = styled(NavLink)`\n  color: #3091EB;\n  text-decoration: none;\n`;\n\n","\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useSignupUserMutation } from 'redux/api/userApi';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport RegStepOne from './RegStepOne';\nimport RegStepTwo from './RegStepTwo';\nimport { ModalContent, ModalWrapper, FormWrapper, ButtonWrapper, FormTitle, Paragraph, LoginLink } from './RegisterForm.styled';\n\nimport Button from 'components/Ui-Kit/Button';\n\n\n\n// Values for Formik\n\nconst initialValues = {\n  name: '',\n  city: '',\n  phone: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\n\n\n// Yup validation\n\nconst validationSchemaStepOne = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .matches(\n      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Please enter a valid email address, example: \"mail@mail.com\"'\n    )\n    .required('Email is required')\n    .min(10, 'Email should be at least 10 characters long')\n    .max(63, 'Email should be up to 63 characters long'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\n      'Minimum 7 characters, 1 uppercase, 1 lowercase, 1 number'\n    )\n    .min(7, 'Password should be at least 7 characters long')\n    .max(32, 'Password should be up to 32 characters long')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Please confirm your password')\n});\n\n\nconst validationSchemaStepTwo = Yup.object().shape({\n  name: Yup.string().min(4, 'Name should have at least 4 characters').required('Name is required'),\n  city: Yup.string()\n    .matches(\n      /^\\s*(?:\\w+\\s*,\\s*){1,}(?:\\w+\\s*)$/,\n      'Should be at least two words separated by string'\n     )\n    .min(4, 'City should have at least 4 characters')\n    .required('City is required'),\n  phone: Yup.string()\n    .matches(\n      /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/,\n      'Phone number should begin with +380 and contain 13 digits (+380123456789)'\n    )\n    .min(13, 'Phone number should be 13 digits')\n    .max(13, 'Phone number should be 13 digits')\n    .required('Phone number is required'),\n});\n\n\n\n\n// main function\n\nconst RegistrationForm = () => {\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [signupUser, { isError }] = useSignupUserMutation();\n  const navigate = useNavigate();\n  const { isAuth } = useSelector(state => state.user);\n    \n    const handleNextClick = () => {\n    setCurrentStep(currentStep + 1);\n  };\n\n  const handleBackClick = () => {\n    setCurrentStep(currentStep - 1);\n  };\n\n    const handleSubmit = (values, { setSubmitting }) => {\n      setSubmitting(false);\n\n    if (currentStep < 2) {\n        handleNextClick();\n    } else {\n        const credentials = {\n            name: values.name,\n            city: values.city,\n            phone: values.phone,\n            email: values.email,\n            password: values.password,\n        };\n\n        signupUser(credentials);\n    }\n    };\n\n  useEffect(() => {\n    if (isAuth) {\n      console.log('Congratulations! You are successfully signed up!');\n      navigate('/');\n    }\n  });\n\n  return (\n    <ModalWrapper>\n      <ModalContent>\n        <FormTitle>Registration</FormTitle>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={currentStep === 1 ? validationSchemaStepOne : validationSchemaStepTwo}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting }) => {\n                        \n            return (\n              <FormWrapper>\n                {currentStep === 1 && <RegStepOne />}\n                {currentStep === 2 && <RegStepTwo />}\n                <ButtonWrapper>\n                  <Button name=\"filled\" type=\"submit\" disabled={isSubmitting}>\n                    {currentStep < 2 ? 'Next' : 'Register'}\n                  </Button>\n                  {currentStep > 1 && (\n                    <Button name=\"transparent\" onClick={handleBackClick}>\n                      Back\n                    </Button>\n                  )}\n                </ButtonWrapper>\n              </FormWrapper>);\n          }}\n        </Formik>\n        <Paragraph>\n          Already have an account?{' '}<LoginLink to=\"/login\">Login</LoginLink>\n        </Paragraph>\n      </ModalContent>\n    </ModalWrapper>\n  );\n};\n\nexport default RegistrationForm;\n\n\n","import React from 'react';\nimport RegistrationForm from 'components/RegisterForm/RegisterForm';\nimport AuthPageContainer from 'components/AuthPageContainer';\nimport Section from 'components/Section';\n\nconst Register = () => {\n  return (\n    <AuthPageContainer>\n      <Section>\n        <RegistrationForm />\n      </Section>\n    </AuthPageContainer>\n  );\n};\n\nexport default Register;\n"],"names":["PasswordWrapper","styled","PasswordToggle","theme","useState","showPassword","setShowPassword","passwordInputType","Input","name","type","placeholder","autocomplete","onClick","ModalWrapper","ModalContent","FormTitle","FormWrapper","Form","ButtonWrapper","Paragraph","LoginLink","NavLink","initialValues","city","phone","email","password","confirmPassword","validationSchemaStepOne","Yup","shape","matches","required","min","max","oneOf","validationSchemaStepTwo","currentStep","setCurrentStep","useSignupUserMutation","signupUser","navigate","isError","useNavigate","isAuth","useSelector","state","user","handleBackClick","useEffect","console","log","validationSchema","onSubmit","values","setSubmitting","credentials","isSubmitting","Button","disabled","to","AuthPageContainer","Section"],"sourceRoot":""}