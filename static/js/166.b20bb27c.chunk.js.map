{"version":3,"file":"static/js/166.b20bb27c.chunk.js","mappings":"sRAaA,EAToB,WAChB,OACI,4BACI,SAACA,EAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,QAAQC,YAAY,WAClD,SAACH,EAAA,EAAU,CAACC,KAAK,WAAWC,KAAK,WAAWC,YAAY,eAGpE,E,uCCNaC,EAAeC,EAAAA,GAAAA,IAAU,8FAMzBC,EAAeD,EAAAA,GAAAA,IAAU,qKAChBE,EAAAA,EAAAA,OAAAA,eAKNA,EAAAA,EAAAA,UAAAA,QAGHC,EAAYH,EAAAA,GAAAA,GAAS,yKACjBE,EAAAA,EAAAA,WAAAA,QACAA,EAAAA,EAAAA,WAAAA,OAKNA,EAAAA,EAAAA,OAAAA,UAEEE,GAAcJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAY,gIAQ1BM,EAAgBN,EAAAA,GAAAA,IAAU,kGAO1BO,EAAYP,EAAAA,GAAAA,EAAQ,wKAChBE,EAAAA,EAAAA,WAAAA,QACAA,EAAAA,EAAAA,WAAAA,OACFA,EAAAA,EAAAA,UAAAA,KAIJA,EAAAA,EAAAA,OAAAA,eAGEM,GAAYR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAe,qE,UCpClCU,EAAgB,CAClBC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAOfC,EAAmBC,EAAAA,KAAaC,MAAM,CAExCL,MAAOI,EAAAA,KACFJ,MAAM,yBACNM,SAAS,qBACdL,SAAUG,EAAAA,KACLG,IAAI,EAAG,+CACPD,SAAS,0BAwDlB,EAjDkB,WAEd,OAAiCE,EAAAA,EAAAA,MAAsB,eAAhDC,EAAS,KACVC,GADqB,KAAPC,SACHC,EAAAA,EAAAA,OACTC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAA1CH,OAkBR,OAPAI,EAAAA,EAAAA,YAAU,WACFJ,IACAK,QAAQC,IAAI,oDACZT,EAAS,KAEjB,KAGI,SAACtB,EAAY,WACT,UAACE,EAAY,YACT,SAACE,EAAS,UAAC,WACX,SAAC,KAAM,CACHO,cAAeA,EACfI,iBAAkBA,EAClBiB,SAvBK,SAACC,GAElB,IAAMC,EAAc,CAChBtB,MAAOqB,EAAOrB,MACdC,SAAUoB,EAAOpB,UAErBQ,EAAUa,EACd,EAgBuC,SAEtB,YAAuB,IAApBC,EAAY,EAAZA,aACA,OACI,UAAC9B,EAAW,YACR,SAAC,EAAW,KACZ,SAACE,EAAa,WACV,SAAC6B,EAAA,EAAM,CAACvC,KAAK,SAASC,KAAK,SAASuC,SAAUF,EAAa,SAAC,eAK5E,KAEJ,UAAC3B,EAAS,WAAC,2BAA4B,SAACC,EAAS,CAAC6B,GAAG,YAAW,SAAC,mBAIjF,E,iDCnFaC,EAAUtC,EAAAA,GAAAA,IAAU,wUAC0BuC,EAAAA,EAGzDrC,EAAAA,EAAAA,GAAAA,OACwDsC,EAAAA,EAGvDtC,EAAAA,EAAAA,GAAAA,QAEiDuC,EAAAA,GCQpD,EAjBc,WACZ,IAAMC,GAAWC,EAAAA,EAAAA,MACTnB,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAA1CH,OAMR,OACE,SAACc,EAAO,WACN,SAACM,EAAA,EAAO,UACLpB,GAAS,mBAAQqB,QAPH,WACnBH,GAASI,EAAAA,EAAAA,MACX,EAK8C,SAAC,YAAkB,SAAC,EAAS,OAI7E,C","sources":["components/LoginForm/LoginInputs.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.js","pages/Login/Login.jsx"],"sourcesContent":["import React from 'react';\nimport InputField from 'components/Ui-Kit/Input';\n\n\nconst LoginInputs = () => {\n    return (\n        <div>\n            <InputField name=\"email\" type=\"email\" placeholder=\"Email\" />\n            <InputField name=\"password\" type=\"password\" placeholder=\"Password\" />\n        </div>\n    );\n};\n\nexport default LoginInputs;","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { theme } from 'constants/theme';\nimport { NavLink } from 'react-router-dom';\n\nexport const ModalWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: ${theme.colors.cardBackground};\n  border-radius: 40px;\n  padding: 60px 80px 40px 80px;\n  width: 618px;\n  max-height: 605px;\n  box-shadow: ${theme.boxShadow.second};\n`;\n\nexport const FormTitle = styled.h1`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.medium};\n  font-size: 36px;\n  line-height: 49px;\n  text-align: center;\n  align-items: center;\n  color: ${theme.colors.mainText};\n`;\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  gap: 30px;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display:flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 100%;\n`;\n\nexport const Paragraph = styled.p`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.normal};\n  font-size: ${theme.fontSizes.xxxs};\n  line-height: 16px;\n  align-items: center;\n  text-align: center;\n  color: ${theme.colors.secondaryText};\n`;\n\nexport const LoginLink = styled(NavLink)`\n  color: #3091EB;\n  text-decoration: none;\n`;\n\n","import React from \"react\";\nimport { useEffect } from 'react';\n\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from 'react-router-dom';\n\nimport { useLoginUserMutation } from \"redux/api/userApi\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport LoginInputs from \"./LoginInputs\";\nimport { ModalContent, ModalWrapper, FormWrapper, ButtonWrapper, FormTitle, LoginLink, Paragraph } from \"./LoginForm.styled\";\n\nimport Button from 'components/Ui-Kit/Button';\n\n\n// Values for Formik\n\nconst initialValues = {\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n\n};\n\n\n// Yup validation\n\nconst validationSchema = Yup.object().shape({\n\n    email: Yup.string()\n        .email(\"Invalid email address\")\n        .required(\"Email is required\"),\n    password: Yup.string()\n        .min(7, \"Password must be at least 7 characters long\")\n        .required(\"Password is required\"),\n});\n\n\n\n// main function\n\nconst LoginForm = () => {\n\n    const [loginUser, { isError }] = useLoginUserMutation();\n    const navigate = useNavigate();\n    const { isAuth } = useSelector(state => state.user);\n\n    const handleSubmit = (values) => {\n\n        const credentials = {\n            email: values.email,\n            password: values.password,\n        };\n        loginUser(credentials);\n    };\n\n    useEffect(() => {\n        if (isAuth) {\n            console.log('Congratulations! You are successfully signed up!');\n            navigate('/');\n        }\n    });\n\n    return (\n        <ModalWrapper>\n            <ModalContent>\n                <FormTitle>Login</FormTitle>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleSubmit}\n                >\n                    {({ isSubmitting }) => {\n                        return (\n                            <FormWrapper>\n                                <LoginInputs />\n                                <ButtonWrapper>\n                                    <Button name=\"filled\" type=\"submit\" disabled={isSubmitting}>\n                                        Submit\n                                    </Button>\n                                </ButtonWrapper>\n                            </FormWrapper>);\n                    }}\n                </Formik>\n                <Paragraph>Don&apos;t have an account? <LoginLink to=\"/register\">Regiser</LoginLink></Paragraph>\n            </ModalContent>\n        </ModalWrapper>\n    );\n};\n\nexport default LoginForm;\n","import { theme } from 'constants/theme';\nimport styled from 'styled-components';\nimport waveMobile from 'assets/images/mobile/wave-login-register.svg';\nimport waveTablet from 'assets/images/tablet/waves-bubbles-login-register.svg';\nimport waveDesktop from 'assets/images/desktop/waves-bubbles-login-register.svg';\n\nexport const Wrapper = styled.div`\nbackground: bottom -150px left 0 / contain no-repeat url(${waveMobile});\n  background-size: 100% 456px;\n  width: 100%;\n${theme.mq.tablet} {\n    background: bottom 0 left 0 / contain no-repeat url(${waveTablet});\n    background-size: 100%;\n  }\n ${theme.mq.desktop} {\n  position: fixed;\n    background: bottom -10px center no-repeat url(${waveDesktop});\n  }\n`;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport { logout } from '../../redux/user/userSlice';\nimport Section from 'components/Section';\nimport { Wrapper } from './Login.styled';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const { isAuth } = useSelector(state => state.user);\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  return (\n    <Wrapper>\n      <Section>\n        {isAuth ? <button onClick={handleLogout}>Logout</button> : <LoginForm />}\n      </Section>\n    </Wrapper>\n  );\n};\n\nexport default Login;\n"],"names":["Input","name","type","placeholder","ModalWrapper","styled","ModalContent","theme","FormTitle","FormWrapper","Form","ButtonWrapper","Paragraph","LoginLink","NavLink","initialValues","email","password","confirmPassword","validationSchema","Yup","shape","required","min","useLoginUserMutation","loginUser","navigate","isError","useNavigate","isAuth","useSelector","state","user","useEffect","console","log","onSubmit","values","credentials","isSubmitting","Button","disabled","to","Wrapper","waveMobile","waveTablet","waveDesktop","dispatch","useDispatch","Section","onClick","logout"],"sourceRoot":""}