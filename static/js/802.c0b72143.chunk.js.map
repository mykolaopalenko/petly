{"version":3,"file":"static/js/802.c0b72143.chunk.js","mappings":"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","sources":["components/Auth/RegisterForm/RegStepOne.styled.js","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/Validation.jsx","components/Auth/RegisterForm/RegStepOne.jsx","components/Auth/RegisterForm/RegStepTwo.styled.js","components/Auth/RegisterForm/RegStepTwo.jsx","components/Auth/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from 'constants/theme';\n\nexport const PasswordWrapper = styled.div`\n  position: relative;\n  padding: 0;\n`;\n\nexport const PasswordToggle = styled.button`\n  position: absolute;\n  right: 10px;\n  bottom: 8px;\n  transform: translateY(-15%);\n  border: none;\n  background: none;\n  font-size: 20px;\n  color: ${theme.colors.secondaryText};\n  cursor: pointer;\n  z-index: 10;\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { theme } from 'constants/theme';\nimport { NavLink } from 'react-router-dom';\n\nexport const ModalWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 85%;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  overflow-y: auto;\n  background-color: ${theme.colors.cardBackground};\n  border-radius: 40px;\n  padding: 60px 80px 40px 80px;\n  width: 618px;\n\n  box-shadow: ${theme.boxShadow.second};\n  ${theme.mq.desktop} {\n    margin-top: 0;\n  }\n  ${theme.mq.tabletOnly} {\n    margin-top: 110px;\n  }\n  ${theme.mq.mobileOnly} {\n    background-color: transparent;\n    box-shadow: none;\n    width: 100%;\n    padding: 0 0 20px 0;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.medium};\n  font-size: 36px;\n  line-height: 49px;\n  text-align: center;\n  align-items: center;\n  color: ${theme.colors.mainText};\n  ${theme.mq.mobileOnly} {\n    font-size: ${theme.fontSizes.l};\n    line-height: 32px;\n  }\n`;\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px;\n  /* margin-bottom: 40px;  */\n  /* gap: 30px; */\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin-bottom: 50px;\n  margin-top: 40px;\n  width: 100%;\n`;\n\nexport const Paragraph = styled.p`\n  font-family: ${theme.fontFamily.manrope};\n  font-weight: ${theme.fontWeight.normal};\n  font-size: ${theme.fontSizes.xxxs};\n  line-height: 16px;\n  align-items: center;\n  text-align: center;\n  color: ${theme.colors.secondaryText};\n`;\n\nexport const LoginLink = styled(NavLink)`\n  color: #3091eb;\n  text-decoration: none;\n`;\n\nexport const ErrorMessage = styled.div`\n  position: absolute;\n  color: red;\n  font-size: 14px;\n  text-align: center;\n  width: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 120px;\n  ${theme.mq.mobileOnly} {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\n// Formik initials\nexport const initialValues = {\n  name: '',\n  city: '',\n  phone: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\n// Yup Validation\nexport const validationSchemaStepOne = Yup.object().shape({\n  email: Yup.string()\n    .email('Please enter a valid email address, example: \"mail@mail.com\"')\n    .matches(\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Please enter a valid email address, example: \"mail@mail.com\"'\n    )\n    .required('Email is required')\n    .min(12, 'Email should be at least 12 characters long')\n    .max(63, 'Email should be up to 63 characters long'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{7,}$/,\n      '7 characters, 1 uppercase, 1 lowercase, 1 number'\n    )\n    .min(7, 'Password should be at least 7 characters long')\n    .max(32, 'Password should be up to 32 characters long')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Please confirm your password'),\n});\n\nexport const validationSchemaStepTwo = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Name should have at least 3 characters')\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      'Only letters can be accepted'\n    )\n    .max(12, 'Name should be up to 12 characters long')\n    .required('Name is required'),\n  city: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n      'Should be \"City, Region\" separated by comma, only letters can be accepted'\n    )\n    .min(3, 'City should have at least 3 characters')\n    .required('City is required'),\n  phone: Yup.string()\n    .matches(\n      /^\\+380\\d{9}$/,\n      'Number should begin with +380 and contain 13 digits'\n    )\n    .min(13, 'Phone number should be 13 digits')\n    .max(13, 'Phone number should be 13 digits')\n    .required('Phone number is required'),\n});\n\n// name without space ^[a-zA-Zа-яА-Я]+(?: [a-zA-Zа-яА-Я]+)*$\n","import React, { useState } from 'react';\nimport InputField from 'components/Ui-Kit/Input';\nimport { PasswordToggle, PasswordWrapper } from './RegStepOne.styled';\nimport { RxEyeOpen, RxEyeClosed } from 'react-icons/rx';\nimport { useIntl } from 'react-intl';\n\nconst RegStepOne = () => {\n  \n  // Define state variable for password visibility\n  const [showPassword, setShowPassword] = useState(false);\n  const { formatMessage } = useIntl();\n\n  // Function to toggle password visibility\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  // Determine password input type based on password visibility\n  const passwordInputType = showPassword ? 'text' : 'password';\n\n  return (\n    <>\n      <InputField\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"Email\"\n        autocomplete=\"email\"\n      />\n\n      <InputField\n        name=\"password\"\n        type={passwordInputType}\n        placeholder={formatMessage({ id: 'password' })}\n        autocomplete=\"new-password\"\n      >\n        <PasswordToggle type=\"button\" onClick={toggleShowPassword}>\n          {showPassword ? <RxEyeOpen /> : <RxEyeClosed />}\n        </PasswordToggle>\n      </InputField>\n\n      <InputField\n        name=\"confirmPassword\"\n        type={passwordInputType}\n        placeholder={formatMessage({ id: 'confirmPas' })}\n        autocomplete=\"new-password\"\n      />\n    </>\n  );\n};\n\nexport default RegStepOne;\n","import styled from 'styled-components';\nimport { theme } from 'constants/theme';\n\n\nexport const List = styled.ul`\n    position: absolute;\n    top: 269px;\n    left: 100px;\n    max-height: 90px;\n    min-height: 20px;\n    overflow-y: scroll;\n    width: 420px;\n    background-color: ${theme.colors.cardBackground};\n    border: 2px solid ${theme.colors.accent};\n    border-radius: 8px;\n    box-shadow: ${theme.boxShadow.notice};\n    z-index: 1;\n    ${theme.mq.mobileOnly} {\n    top: 185px;\n    left: 16px;\n    width: 250px;\n    max-width: 420px;\n    border: 1px solid ${theme.colors.borderColor};\n    box-shadow: ${theme.boxShadow.notice};\n    }   \n`;\n\nexport const ListItem = styled.li`\n    padding: 4px 8px;\n    font-size: 14px;\n    line-height: 1.5;\n    color: ${theme.colors.secondaryText};\n    cursor: pointer;\n\n    &:hover {\n    background-color: ${theme.colors.borderColor};\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport InputField from 'components/Ui-Kit/Input';\nimport PropTypes from 'prop-types';\nimport cities from 'assets/files/uaCities.json';\nimport { List, ListItem } from './RegStepTwo.styled';\nimport { useIntl } from 'react-intl';\n\nconst RegStepTwo = ({ value, setFieldValue }) => {\n  const { formatMessage } = useIntl();\n  const [filteredCities, setFilteredCities] = useState([]);\n\n\n  // Update the list of filtered cities whenever the value of the input field changes\n  useEffect(() => {\n    const inputValue = value || '';\n    if (inputValue) {\n      const filtered = cities\n        .filter((city) => city.city.toLowerCase().startsWith(value.toLowerCase()))\n        .map(({ city, admin_name }) => `${city}, ${admin_name}`);\n      setFilteredCities(filtered);\n    } else {\n      setFilteredCities([]);\n    }\n  }, [value]);\n\n\n  // Handler for when a city is selected from the filtered list\n  const handleCityClick = (city) => {\n    setFieldValue('city', city);\n    setFilteredCities([]);\n  };\n\n\n  return (\n    <>\n      <InputField\n        name=\"name\"\n        type=\"name\"\n        placeholder={formatMessage({ id: 'name' })}\n      />\n\n      <InputField\n        name=\"city\"\n        type=\"city\"\n        placeholder={formatMessage({ id: 'city' })}\n      />\n      {filteredCities.length > 0 && (\n        <List>\n          {filteredCities.map((city, index) => (\n            <ListItem onClick={() => handleCityClick(city)} key={index}>\n              {city}\n            </ListItem>\n          ))}\n        </List>\n      )}\n\n      <InputField\n        name=\"phone\"\n        type=\"phone\"\n        placeholder={formatMessage({ id: 'phoneInput' })}\n      />\n    </>\n  );\n};\n\nRegStepTwo.propTypes = {\n  value: PropTypes.string,\n  setFieldValue: PropTypes.func,\n};\n\nexport default RegStepTwo;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useSignupUserMutation } from 'redux/api/userApi';\nimport { Formik } from 'formik';\nimport {\n  initialValues,\n  validationSchemaStepOne,\n  validationSchemaStepTwo,\n} from './Validation';\nimport RegStepOne from './RegStepOne';\nimport RegStepTwo from './RegStepTwo';\nimport {\n  ModalContent,\n  ModalWrapper,\n  FormWrapper,\n  ButtonWrapper,\n  FormTitle,\n  Paragraph,\n  LoginLink,\n  ErrorMessage,\n} from './RegisterForm.styled';\nimport Button from 'components/Ui-Kit/Button';\nimport Loader from 'components/Loader';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage } from 'react-intl';\n\nconst RegistrationForm = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [signupUser, { isLoading, isError, error }] = useSignupUserMutation();\n\n  const handleNextClick = () => {\n    setCurrentStep(currentStep + 1);\n  };\n\n  const handleBackClick = () => {\n    setCurrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = (values, { setSubmitting }) => {\n    setSubmitting(false);\n\n    if (currentStep < 2) {\n      handleNextClick();\n    } else {\n      const credentials = {\n        name: values.name,\n        city: values.city,\n        phone: values.phone,\n        email: values.email,\n        password: values.password,\n      };\n\n      signupUser(credentials);\n    }\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ModalWrapper>\n        <ModalContent>\n          <FormTitle>\n            <FormattedMessage id=\"registration\" />\n          </FormTitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={\n              currentStep === 1\n                ? validationSchemaStepOne\n                : validationSchemaStepTwo\n            }\n            onSubmit={handleSubmit}\n          >\n            {({ isSubmitting, values, setFieldValue }) => {\n              return (\n                <FormWrapper>\n                  {currentStep === 1 && <RegStepOne />}\n                  {currentStep === 2 && (\n                    <RegStepTwo\n                      value={values.city}\n                      setFieldValue={setFieldValue}\n                    />\n                  )}\n                  <ButtonWrapper>\n                    <Button name=\"filled\" type=\"submit\" disabled={isSubmitting}>\n                      {currentStep < 2 ? (\n                        <FormattedMessage id=\"next\" />\n                      ) : (\n                        <FormattedMessage id=\"register\" />\n                      )}\n                    </Button>\n                    {currentStep > 1 && (\n                      <Button name=\"transparent\" onClick={handleBackClick}>\n                        <FormattedMessage id=\"back\" />\n                      </Button>\n                    )}\n                  </ButtonWrapper>\n                </FormWrapper>\n              );\n            }}\n          </Formik>\n          <Paragraph>\n            <FormattedMessage id=\"haveAnAccount\" />{' '}\n            <LoginLink to=\"/login\">\n              <FormattedMessage id=\"login\" />\n            </LoginLink>\n          </Paragraph>\n          {isError && <ErrorMessage>Invalid password or email</ErrorMessage>}\n        </ModalContent>\n      </ModalWrapper>\n    </>\n  );\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'components/Auth/RegisterForm/RegisterForm';\nimport AuthPageContainer from 'components/Auth/AuthPageContainer';\nimport Section from 'components/Section';\n\nconst Register = () => {\n  return (\n    <AuthPageContainer>\n      <Section>\n        <RegistrationForm />\n      </Section>\n    </AuthPageContainer>\n  );\n};\n\nexport default Register;\n"],"names":["PasswordToggle","styled","theme","ModalWrapper","ModalContent","FormTitle","FormWrapper","Form","ButtonWrapper","Paragraph","LoginLink","NavLink","ErrorMessage","initialValues","name","city","phone","email","password","confirmPassword","validationSchemaStepOne","Yup","shape","matches","required","min","max","oneOf","validationSchemaStepTwo","useState","showPassword","setShowPassword","formatMessage","useIntl","passwordInputType","Input","type","placeholder","autocomplete","id","onClick","List","ListItem","value","setFieldValue","filteredCities","setFilteredCities","useEffect","filtered","cities","toLowerCase","startsWith","map","admin_name","length","index","handleCityClick","currentStep","setCurrentStep","useSignupUserMutation","signupUser","isLoading","isError","handleBackClick","error","Loader","validationSchema","onSubmit","values","setSubmitting","credentials","isSubmitting","Button","disabled","to","AuthPageContainer","Section"],"sourceRoot":""}